{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n;\n\n(function (root, factory) {\n  /* istanbul ignore next */\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    module.exports = factory();\n  } else {\n    root.Smartcar = factory();\n  }\n})(this, function () {\n  'use strict';\n  /* eslint-env node */\n\n  var Smartcar = function () {\n    /**\n     * @callback OnComplete\n     * @param {?Error} error - something went wrong in the authorization flow; this\n     * normally indicates that the user denied access to your application or does not\n     * have a connected vehicle\n     * @param {String} code - the authorization code to be exchanged from a\n     * backend sever for an access token\n     * @param {Object} [state] - contains state if it was set on the initial\n     * authorization request\n     */\n\n    /**\n     * Initializes Smartcar class.\n     *\n     * @constructor\n     * @param {Object} options - the SDK configuration object\n     * @param {String} options.clientId - the application's client id\n     * @param {String} options.redirectUri - the registered redirect uri of the\n     * application\n     * @param {String[]} [options.scope] - requested permission scopes\n     * @param {OnComplete} [options.onComplete] - called on completion of auth flow\n     * @param {Boolean} [options.testMode=false] - launch the Smartcar auth flow in test mode\n     */\n    function Smartcar(options) {\n      var _this = this;\n\n      _classCallCheck(this, Smartcar); // ensure options are well formed\n\n\n      Smartcar._validateConstructorOptions(options);\n\n      this.clientId = options.clientId;\n      this.redirectUri = options.redirectUri;\n      this.scope = options.scope;\n      this.onComplete = options.onComplete;\n      this.mode = options.testMode === true ? 'test' : 'live';\n      this.responseType = 'code'; // handler\n\n      this.messageHandler = function (event) {\n        // bail if message from unexpected source\n        if (!_this.redirectUri.startsWith(event.origin)) {\n          return;\n        }\n\n        var message = event.data || {}; // bail if `message.name` is not `SmartcarAuthMessage`\n        // this prevents attempting to handle messages intended for others\n\n        if (message.name !== 'SmartcarAuthMessage') {\n          return;\n        } // if onComplete not specified do nothing, assume developer is conveying\n        // completion information from backend server receiving redirect to front\n        // end (not using onComplete)\n\n\n        if (_this.onComplete) {\n          // if auth errored generate appropriate error else null\n          var generateError = function generateError(error, description) {\n            if (!error) {\n              return null;\n            }\n\n            return error === 'access_denied' ? new Smartcar.AccessDenied(description) : new Error('Unexpected error: ' + error + ' - ' + description);\n          };\n\n          var err = generateError(message.error, message.errorDescription);\n          /**\n           * Call `onComplete` with parameters even if developer is not using\n           * a Smartcar-hosted redirect. Regardless of if they are using a\n           * Smartcar-hosted redirect they may still want `onComplete` to do\n           * something with message.\n           *\n           * If empty onComplete is passed, parameters will be harmlessly ignored.\n           *\n           * If a developer chooses to pass an `onComplete` expecting these\n           * parameters they must also handle populating the corresponding query\n           * parameters in their redirect uri.\n           */\n\n          _this.onComplete(err, message.code, message.state);\n        }\n      }; // add handler for postMessage event on completion of auth flow\n\n\n      window.addEventListener('message', this.messageHandler);\n    }\n    /**\n     * Validate options passed to Smartcar constructor.\n     *\n     * See constructor documentation for enumeration of options properties.\n     *\n     * @private\n     * @param {Object} options - the SDK configuration object\n     */\n\n\n    _createClass(Smartcar, [{\n      key: 'getAuthUrl',\n\n      /**\n       * Generates Smartcar OAuth URL.\n       *\n       * @param {Object} options - the link configuration object\n       * @param {String} [options.state] - arbitrary parameter passed to redirect uri\n       * @param {Boolean} [options.forcePrompt=false] - force permission approval\n       * screen to show on every authentication, even if the user has previously\n       * consented to the exact scope of permission\n       * @return {String} generated OAuth link\n       */\n      value: function getAuthUrl(options) {\n        options = options || {};\n        var link = '';\n        link += 'https://connect.smartcar.com/oauth/authorize';\n        link += '?response_type=' + this.responseType;\n        link += '&client_id=' + this.clientId;\n        link += '&redirect_uri=' + encodeURIComponent(this.redirectUri); // map forcePrompt to approvalPrompt, two options: 'force' and 'auto'\n\n        var forcePrompt = options.forcePrompt || false;\n        link += '&approval_prompt=' + (forcePrompt ? 'force' : 'auto'); // If scope is not specified, Smartcar will default to requesting all scopes\n        // from the user\n\n        if (this.scope) {\n          link += '&scope=' + encodeURIComponent(this.scope.join(' '));\n        }\n\n        link += '&mode=' + this.mode;\n\n        if (options.state) {\n          link += '&state=' + options.state;\n        }\n\n        return link;\n      }\n      /**\n       * Launches the OAuth dialog flow.\n       *\n       * @param {Object} options - the link configuration object\n       * @param {String} [options.state] - arbitrary parameter passed to redirect uri\n       * @param {Boolean} [options.forcePrompt=false] - force permission approval\n       * screen to show on every authentication, even if the user has previously\n       * consented to the exact scope of permission\n       */\n\n    }, {\n      key: 'openDialog',\n      value: function openDialog(options) {\n        var href = this.getAuthUrl(options);\n\n        var windowOptions = Smartcar._getWindowOptions();\n\n        window.open(href, 'Connect your car', windowOptions);\n      }\n      /**\n       * Adds an on-click event listener to the element with the provided id.\n       *\n       * On-click event calls openDialog when the specified element is clicked.\n       *\n       * @param {Object} options - clickHandler configuration object\n       * @param {String} options.id - id of the element to add click handler to\n       * @param {String} [options.state] - arbitrary parameter passed to redirect uri\n       * @param {Boolean} [options.forcePrompt] - force permission approval screen to\n       * show on every authentication, even if the user has previously consented\n       * to the exact scope of permission\n       */\n\n    }, {\n      key: 'addClickHandler',\n      value: function addClickHandler(options) {\n        var _this2 = this;\n\n        var id = options.id;\n        var dialogOptions = {\n          state: options.state,\n          forcePrompt: options.forcePrompt\n        };\n        var element = document.getElementById(id);\n\n        if (!element) {\n          throw new Error('Could not add click handler: element with id \\'' + id + '\\' was not found.');\n        }\n\n        element.addEventListener('click', function () {\n          _this2.openDialog(dialogOptions); // this is equivalent to calling:\n          // event.preventDefault();\n          // event.stopPropogation();\n\n\n          return false;\n        });\n      }\n    }], [{\n      key: '_validateConstructorOptions',\n      value: function _validateConstructorOptions(options) {\n        // allow only one instance of Smartcar\n        if (Smartcar._hasBeenInstantiated) {\n          throw new Error('Smartcar has already been instantiated in the window. Only one' + ' instance of Smartcar can be defined.');\n        } else {\n          Smartcar._hasBeenInstantiated = true;\n        }\n\n        if (!options.clientId) {\n          throw new TypeError('A client ID option must be provided');\n        }\n\n        if (!options.redirectUri) {\n          throw new TypeError('A redirect URI option must be provided');\n        }\n\n        if (options.redirectUri.startsWith('https://javascript-sdk.smartcar.com')) {\n          // require onComplete method with at least two parameters (error & code)\n          // when hosting on Smartcar CDN\n          if (!options.onComplete || options.onComplete.length < 2) {\n            throw new Error(\"When using Smartcar's CDN redirect an onComplete function with at\" + ' least 2 parameters (error & code) is required to handle' + ' completion of authorization flow');\n          }\n        }\n      }\n      /**\n       * Calculate popup window size and position based on current window settings.\n       *\n       * @private\n       * @return {String} a string of window settings\n       */\n\n    }, {\n      key: '_getWindowOptions',\n      value: function _getWindowOptions() {\n        // Sets default popup window size\n        var windowSettings = {\n          width: 430,\n          height: 500\n        };\n        var width = (window.outerWidth - windowSettings.width) / 2;\n        var height = (window.outerHeight - windowSettings.height) / 8;\n        var options = '';\n        options += 'top=' + (window.screenY + height) + ',';\n        options += 'left=' + (window.screenX + width) + ',';\n        options += 'width=' + windowSettings.width + ',';\n        options += 'height=' + windowSettings.height + ',';\n        return options;\n      }\n    }]);\n\n    return Smartcar;\n  }();\n  /**\n   * Access denied error returned by authorization flow.\n   *\n   * @extends Error\n   */\n\n\n  Smartcar.AccessDenied = function (_Error) {\n    _inherits(_class, _Error);\n    /**\n     * @param {String} message - detailed error description\n     */\n\n\n    function _class(message) {\n      _classCallCheck(this, _class);\n\n      var _this3 = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, message));\n\n      _this3.name = 'AccessDenied';\n      return _this3;\n    }\n\n    return _class;\n  }(Error);\n\n  return Smartcar;\n});","map":null,"metadata":{},"sourceType":"script"}